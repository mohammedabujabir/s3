// <auto-generated />
using System;
using Ecop.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecop.PL.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212174253_updatetables")]
    partial class updatetables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecop.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c8ef6f1b-42f4-401f-9c2b-d92ea5c48f98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b8701ff-22b7-4037-ba95-359e54ceb405",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENvj5QcMwTpKRQNBGDWn1vGIPMiVvnrA0TnuRrg7ltwa+YEp/3bWlx5b23orsk7M5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dec872ff-1644-430c-90ae-536a6ed6fc25",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "7dd0c4e4-0624-413a-9846-8dbd645b85f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89eb1d2a-5e13-45e3-85c6-42e645aa4e4b",
                            Email = "citizen1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITIZEN1@GMAIL.COM",
                            NormalizedUserName = "CITIZEN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFSD9nRxB4sQDaWWsHNwazS110C9aCwYuJJi9Xg6EXjwamM9hvV45fzmmkjbB/uL3Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2a53919f-5f79-4432-a8b4-7f95e502976c",
                            TwoFactorEnabled = false,
                            UserName = "citizen1"
                        },
                        new
                        {
                            Id = "6ebf1b40-4d75-4351-a7d7-4dfa97b749c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69fe26b9-65c2-494f-a11d-bf41edd367c2",
                            Email = "citizen2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CITIZEN2@GMAIL.COM",
                            NormalizedUserName = "CITIZEN2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIJy0kUBwEoPrjONrXQ+Tnzn2KKDgS4dLMtRAwiyiWh+81Ezszs78vb8GxZ8RJmSYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9c2bbb91-3c45-49b1-983e-01b7aff3aba0",
                            TwoFactorEnabled = false,
                            UserName = "citizen2"
                        },
                        new
                        {
                            Id = "bb025201-b208-4d99-bb48-b80b38b2e213",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9218b142-3238-4c74-828d-0b48e5af5da6",
                            Email = "policman1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICEMAN1@GMAIL.COM",
                            NormalizedUserName = "POLICEMAN1",
                            PasswordHash = "AQAAAAIAAYagAAAAEPek6sC/V1j8oBq8IquU8VXnFzMLeh1Bt7w+RdHmwwHI8P0TtYgn1DfpZ6xjm5XtJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a41c6fbf-9b54-49b3-bd2f-55a7bd8ef99a",
                            TwoFactorEnabled = false,
                            UserName = "policman1"
                        },
                        new
                        {
                            Id = "2aa29558-5abd-4bfa-88bf-9658714c188b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8b8ecf7-836f-4b19-8c0c-b1717e462ab3",
                            Email = "policman2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "POLICEMAN2@GMAIL.COM",
                            NormalizedUserName = "POLICEMAN2",
                            PasswordHash = "AQAAAAIAAYagAAAAEOWTXq56VPI8dAGZ8tyWJRXaddf/1c/Xy3f+Jvm6WVM+fqr08WWBP6cKNi4b/X37GQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c679799-5263-4eea-8de1-98f8779b76ea",
                            TwoFactorEnabled = false,
                            UserName = "policman2"
                        },
                        new
                        {
                            Id = "be26c05c-c4b4-4e64-987d-83ebea155bf7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e215ef35-9dbe-4229-ac03-896958f7df0f",
                            Email = "judge1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGE1@GMAIL.COM",
                            NormalizedUserName = "JUDGE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIL2NBNnJqZYPpl2cRNc5SQynj+FqMrRNCzP8ftXpmSlDgSeORvQGOP/XuotrarWsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b9a2864-5aa2-4ca0-862e-3d8ef16fc5a1",
                            TwoFactorEnabled = false,
                            UserName = "judge1"
                        },
                        new
                        {
                            Id = "67891b16-13f2-4095-aa13-605e93212d70",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "73c22c1e-10e0-4a65-8adb-a0148af987ee",
                            Email = "judge2@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JUDGE2@GMAIL.COM",
                            NormalizedUserName = "JUDGE2",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZWR9WA01BKnocczrOpMOYRq4A+/XQScblMl0KLBQE41V+fc1pU7vxJhaRRbUW1eA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3092040c-657b-4b60-bfce-869b17780308",
                            TwoFactorEnabled = false,
                            UserName = "judge2"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.Property<int>("CitizenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitizenId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Camera_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitizenId");

                    b.HasIndex("UserId");

                    b.ToTable("Citizens");

                    b.HasData(
                        new
                        {
                            CitizenId = 1,
                            Address = "Tubas",
                            Camera_id = "cam123",
                            Email = "braa@gmail.com",
                            Name = "Braa",
                            Password = "Pass@123",
                            Phone = "1231231234",
                            UserId = "7dd0c4e4-0624-413a-9846-8dbd645b85f8"
                        },
                        new
                        {
                            CitizenId = 2,
                            Address = "Tulkarm",
                            Camera_id = "cam456",
                            Email = "osama@gmail.com",
                            Name = "Osama",
                            Password = "Pass@123",
                            Phone = "3213214321",
                            UserId = "6ebf1b40-4d75-4351-a7d7-4dfa97b749c6"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Court", b =>
                {
                    b.Property<int>("CourtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourtId");

                    b.ToTable("Courts");
                });

            modelBuilder.Entity("Ecop.DAL.Models.CourtDecisions", b =>
                {
                    b.Property<int>("CourtDecisionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourtDecisionsId"));

                    b.Property<int>("Courtid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CoutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("Penalty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PoliceDecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Verdict")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("CourtDecisionsId");

                    b.HasIndex("Courtid");

                    b.HasIndex("JudgeId");

                    b.HasIndex("PoliceDecisionId")
                        .IsUnique()
                        .HasFilter("[PoliceDecisionId] IS NOT NULL");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.Property<int>("JudgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JudgeId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("JudgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Judges");

                    b.HasData(
                        new
                        {
                            JudgeId = 1,
                            Address = "Jenin",
                            Email = "ali@gmail.com",
                            Name = "Ali",
                            Password = "Pass@123",
                            Phone = "1234567890",
                            UserId = "be26c05c-c4b4-4e64-987d-83ebea155bf7"
                        },
                        new
                        {
                            JudgeId = 2,
                            Address = "Nablus",
                            Email = "hadi@gmail.com",
                            Name = "Hadi",
                            Password = "Pass@123",
                            Phone = "0987654321",
                            UserId = "67891b16-13f2-4095-aa13-605e93212d70"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.Property<int>("PolicemanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PolicemanId"));

                    b.Property<string>("Badge_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PolicemanId");

                    b.HasIndex("UserId");

                    b.ToTable("Policemans");

                    b.HasData(
                        new
                        {
                            PolicemanId = 1,
                            Badge_Number = "12345",
                            Email = "mohammed@gmail.com",
                            Name = "Mohammed",
                            Password = "Pass@123",
                            Phone = "0123456789",
                            UserId = "bb025201-b208-4d99-bb48-b80b38b2e213"
                        },
                        new
                        {
                            PolicemanId = 2,
                            Badge_Number = "54321",
                            Email = "noor@gmail.com",
                            Name = "Noor",
                            Password = "Pass@123",
                            Phone = "0987654321",
                            UserId = "2aa29558-5abd-4bfa-88bf-9658714c188b"
                        });
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.Property<int>("PolicemanDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DecisionNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Policemanid")
                        .HasColumnType("int");

                    b.Property<bool>("ReferredToCourt")
                        .HasColumnType("bit");

                    b.Property<int>("Violationid")
                        .HasColumnType("int");

                    b.HasKey("PolicemanDecisionId");

                    b.HasIndex("Violationid")
                        .IsUnique();

                    b.ToTable("PolicemanDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.Property<int>("TrafficViolationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrafficViolationId"));

                    b.Property<string>("Car_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CitizenId")
                        .HasColumnType("int");

                    b.Property<int?>("CourtDecisionId")
                        .HasColumnType("int");

                    b.Property<int?>("DecisionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Reported_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video_Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrafficViolationId");

                    b.HasIndex("CitizenId");

                    b.ToTable("TrafficViolations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cde66c04-f06b-4343-9e15-39695f02fa95",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "551024e5-b7d5-4d32-b02f-6ecb857f7140",
                            Name = "Citizen",
                            NormalizedName = "CITIZEN"
                        },
                        new
                        {
                            Id = "bd7b4f79-3b4f-4e1a-aee0-605d7aa59ed7",
                            Name = "Policeman",
                            NormalizedName = "POLICEMAN"
                        },
                        new
                        {
                            Id = "23d71d4b-42f5-4cbd-a2bb-ac172cab9060",
                            Name = "Judge",
                            NormalizedName = "JUDGE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c8ef6f1b-42f4-401f-9c2b-d92ea5c48f98",
                            RoleId = "cde66c04-f06b-4343-9e15-39695f02fa95"
                        },
                        new
                        {
                            UserId = "7dd0c4e4-0624-413a-9846-8dbd645b85f8",
                            RoleId = "551024e5-b7d5-4d32-b02f-6ecb857f7140"
                        },
                        new
                        {
                            UserId = "6ebf1b40-4d75-4351-a7d7-4dfa97b749c6",
                            RoleId = "551024e5-b7d5-4d32-b02f-6ecb857f7140"
                        },
                        new
                        {
                            UserId = "bb025201-b208-4d99-bb48-b80b38b2e213",
                            RoleId = "bd7b4f79-3b4f-4e1a-aee0-605d7aa59ed7"
                        },
                        new
                        {
                            UserId = "2aa29558-5abd-4bfa-88bf-9658714c188b",
                            RoleId = "bd7b4f79-3b4f-4e1a-aee0-605d7aa59ed7"
                        },
                        new
                        {
                            UserId = "be26c05c-c4b4-4e64-987d-83ebea155bf7",
                            RoleId = "23d71d4b-42f5-4cbd-a2bb-ac172cab9060"
                        },
                        new
                        {
                            UserId = "67891b16-13f2-4095-aa13-605e93212d70",
                            RoleId = "23d71d4b-42f5-4cbd-a2bb-ac172cab9060"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecop.DAL.Models.Car", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Citizen", "Citizen")
                        .WithMany("Cars")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.CourtDecisions", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Court", "Court")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("Courtid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.Judge", "Judge")
                        .WithMany("CourtDecisions")
                        .HasForeignKey("JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.PolicemanDecision", "PoliceDecision")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Ecop.DAL.Models.CourtDecisions", "PoliceDecisionId");

                    b.HasOne("Ecop.DAL.Models.TrafficViolation", "ViolationStatus")
                        .WithOne("CourtDecision")
                        .HasForeignKey("Ecop.DAL.Models.CourtDecisions", "Violationid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("Judge");

                    b.Navigation("PoliceDecision");

                    b.Navigation("ViolationStatus");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Policeman", "Policeman")
                        .WithMany("Decisions")
                        .HasForeignKey("PolicemanDecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.TrafficViolation", "TrafficViolation")
                        .WithOne("Decision")
                        .HasForeignKey("Ecop.DAL.Models.PolicemanDecision", "Violationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policeman");

                    b.Navigation("TrafficViolation");
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.HasOne("Ecop.DAL.Models.Citizen", "Citizen")
                        .WithMany("TrafficViolations")
                        .HasForeignKey("CitizenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Citizen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecop.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecop.DAL.Models.Citizen", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("TrafficViolations");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Court", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Judge", b =>
                {
                    b.Navigation("CourtDecisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.Policeman", b =>
                {
                    b.Navigation("Decisions");
                });

            modelBuilder.Entity("Ecop.DAL.Models.PolicemanDecision", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecop.DAL.Models.TrafficViolation", b =>
                {
                    b.Navigation("CourtDecision")
                        .IsRequired();

                    b.Navigation("Decision")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
